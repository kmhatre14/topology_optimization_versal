# /*
# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: X11
# */

F_PROJ_ROOT ?= $(shell bash -c 'export MK_PATH=$(MK_PATH); echo $${MK_PATH%/AI_Engine_Development/*}')

# ROOTFS ?= ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.1/rootfs.ext4
# IMAGE ?= ${PLATFORM_REPO_PATHS}/sw/versal/xilinx-versal-common-v2024.1/Image
SDKTARGETSYSROOT ?= ${SYSROOT}

# Makefile input options
TARGET := sw_emu
PFM := platform_link
DEVICE_DEBUG := OFF
BUFF_OPT := 8

# Design source files 
AIE_SRC := no_aie
PL_SRC := no_pl
HOST_LOC := no_host
HOST_SRC := ./host/$(HOST_LOC)/host.cpp

# Platform information 
PLATFORM_NAME=xilinx_vek280_base_202410_1

# Location to save temporary logs and compilation files and output 
DESIGN_NAME := $(AIE_SRC)_$(PL_SRC)_$(HOST_LOC)_BufOpt$(BUFF_OPT)
BUILD_DIR_MAIN = build/$(DESIGN_NAME)_$(TARGET)
EXEC_DIR = output/$(DESIGN_NAME)_$(TARGET)
ifeq ($(DEVICE_DEBUG),ON)
EXEC_DIR = output/$(DESIGN_NAME)_$(TARGET)_debug
endif
BUILD_DIR := ./$(BUILD_DIR_MAIN)/build_dir.$(TARGET).${PLATFORM_NAME}
TEMP_DIR := ./$(BUILD_DIR_MAIN)/pl_kernel.$(TARGET).${PLATFORM_NAME}

# File names and locations
GRAPH := $(AIE_SRC)/aie_top_all.cpp
PL_SRC_FILE := ./pl/$(PL_SRC)/dma0.cpp ./pl/$(PL_SRC)/dma0.hpp

# Ouput executable files
GRAPH_O := libadf.a
XCLBIN = ${PLATFORM_NAME}${TARGET}.xsa
FINAL_XCLBIN=mm_${TARGET}.xclbin
ifeq ($(TARGET),sw_emu)
	EXECUTABLE = ./host_ps_on_x86
else
	EXECUTABLE = host.exe
endif

ifeq ($(TARGET),sw_emu)
	KERNEL_XO := $(EXEC_DIR)/dma0.xo
else
	KERNEL_XO := $(EXEC_DIR)/dma0.xo
endif

# Location of the config file for connectivity
CONFIG := conn.cfg
CONFIG_FILE := ./connectivity_config/$(CONFIG)

EMCONFIG_FILE = emconfig.json


PACKAGE_OUT = ./package.$(TARGET)

BASE_PLATFORM ?= /home/adityar4/Desktop/adityar4/Vitis/2024.2/base_platforms/xilinx_vek280_base_202420_1/xilinx_vek280_base_202420_1.xpfm

# Command-line options
VPP := v++
AIECC := v++ -c --mode aie
AIESIM := aiesimulator
X86SIM := x86simulator
SW_EMU_CMD := ./host_ps_on_x86 ${FINAL_XCLBIN} 128 128 128 1 0
HW_EMU_CMD := ./launch_hw_emu.sh -aie-sim-options ../aiesimulator_output/aiesim_options.txt -add-env AIE_COMPILER_WORKDIR=../Work 

AIE_WORK_DIR = $(BUILD_DIR_MAIN)/Work_AIE_$(AIE_SRC)_$(TARGET)
AIE_SIM_DIR = sim/$(DESIGN_NAME)_$(TARGET)

# AIE flags 
AIE_INCLUDE_FLAGS := --include "$(XILINX_VITIS)/aietools/include" \
					--include "./$(AIE_SRC)" \
					--include "./data" \
					--include "./$(AIE_SRC)/kernels" \
					--include "./nn" \
					--include "./" 
					

AIE_FLAGS := $(AIE_INCLUDE_FLAGS) --platform $(BASE_PLATFORM)  \
			--aie.xlopt=1 --aie.stacksize=1024 \
			--aie.pl-register-threshold=350 \
			--aie.pl-freq=300 \
			--work_dir ./$(AIE_WORK_DIR) \
			--output=$(EXEC_DIR)/$(GRAPH_O)

# --aie.pl-register-threshold=350
# The pl register threshold puts and indirect limit on the use of PLIO connections
# If the threshold > pl freq : then use all 8 channels (Needs relaxed timing)
# If the threshold < pl freq : then use 6 channels (required for high frequency)


ifeq ($(BUFF_OPT),8)
	AIE_FLAGS += --aie.Xmapper=BufferOptLevel8 
else
	AIE_FLAGS += --aie.Xmapper=BufferOptLevel$(BUFF_OPT)
endif





# --aie.pl-freq=300 --aie.disable-transform-broadcast-split=false \

ifeq ($(TARGET),sw_emu)
	AIE_FLAGS += --target x86sim
else
	AIE_FLAGS += --target hw
endif 

# HLS kernel compilation flags flags 
ifeq ($(TARGET),sw_emu)
	VPP_XO_FLAGS := -c --platform $(BASE_PLATFORM) -t $(TARGET) --save-temps -g
	VPP_XO_FLAGS += -I ./pl/$(PL_SRC)
else
	VPP_XO_FLAGS := -c --mode hls --platform $(BASE_PLATFORM)
endif
# 				$(EXEC_DIR)/$(GRAPH_O) --save-temps \
# Link flags 
VPP_LINK_FLAGS := -l -t $(TARGET) --platform $(BASE_PLATFORM) $(KERNEL_XO) $(EXEC_DIR)/$(GRAPH_O) \
				--save-temps \
				-g --config $(CONFIG_FILE) \
				-o $(EXEC_DIR)/$(PFM).xsa \
				-I ./pl/$(PL_SRC) \
				--temp_dir $(BUILD_DIR_MAIN)/xsa_link_temp \
				--clock.freqHz 230000000:dma0_0

ifeq ($(DEVICE_DEBUG),ON)
VPP_LINK_FLAGS += --profile.data all:all:all
endif

# VPP_FLAGS := $(VPP_LINK_FLAGS)

# Host compilation flags
GCC_FLAGS := -Wall -c \
	     -std=c++17 

ifeq ($(TARGET),sw_emu)
	GCC_FLAGS += -I${XILINX_XRT}/include
endif

ifeq ($(TARGET),sw_emu)
	GCC_INCLUDES += -I${XILINX_XRT}/include 
else
	GCC_INCLUDES += -I$(SDKTARGETSYSROOT)/usr/include/xrt
endif

GCC_LIB := -lxrt_coreutil
ifeq ($(TARGET),sw_emu)
	GCC_LIB += -L${XILINX_XRT}/lib 
endif 

LDCLFLAGS := $(GCC_LIB)



.ONESHELL:
.PHONY: clean all pl_kernels aie aiesim xsa host package run_emu

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vek280_base_202410_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2024.1/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2024.1/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2024.1/environment-setup-aarch64-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2024.1/environment-setup-aarch64-xilinx-linux)

###

all: aie pl_kernels xsa host package
sd_card: all

######################################################
# This step compiles the HLS C pl_kernels and creates the *.xo's 
# which is used as the output and from the *.cpp files.
# Note : hw_emu and hw targets use the Unified CLI command to 
# compile HLS pl_kernels
pl_kernels: guard-PLATFORM_REPO_PATHS 
ifeq ($(TARGET),sw_emu)
	$(VPP) $(VPP_XO_FLAGS) -k dma0 pl/$(PL_SRC)/dma0.cpp -D__SW_EMU__ -o $(KERNEL_XO) --temp_dir $(TEMP_DIR)/hls_kernel_temp/
else
	@sed -i '9c\package.output.file=../../$(EXEC_DIR)/dma0.xo' pl/$(PL_SRC)/dma0.cfg 
	$(VPP) $(VPP_XO_FLAGS) --config pl/$(PL_SRC)/dma0.cfg --work_dir $(BUILD_DIR_MAIN)/pl_kernel 
endif

######################################################
# This step compiles the AIE pl_kernels 
aie: $(EXEC_DIR)/$(GRAPH_O)
#AIE or X86 compilation
$(EXEC_DIR)/$(GRAPH_O): $(GRAPH)
	@mkdir -p $(EXEC_DIR)
	$(AIECC) $(AIE_FLAGS) $(GRAPH)


########################################################
# XSA Generation
# Once the pl_kernels and graph are generated, you can build
# the hardware part of the design. This creates an xsa
# that will be used to run the design on the platform.
xsa: guard-PLATFORM_REPO_PATHS $(EXEC_DIR)/$(GRAPH_O) $(KERNEL_XO)
	$(VPP) $(VPP_LINK_FLAGS) || (echo "task: [xsa] failed error code: $$?"; exit 1)
	@echo "COMPLETE: .xsa created."


#################################################################################################
# PS/Host code compilation For sw emulation, hw emulation and hardware
ifeq ($(TARGET),sw_emu)
host: guard-CXX guard-SDKTARGETSYSROOT 
	g++ -g -Wall -c -std=c++17 -D__PS_ENABLE_AIE__ -D__SW_EMU__ -D__PS_ENABLE_AIE__\
		-Wno-int-to-pointer-cast -I${XILINX_XRT}/include \
		-I./ -I./aie/$(AIE_SRC)/kernels \
		-I./aie/$(AIE_SRC) -I${XILINX_VITIS}/aietools/include \
		-o $(EXEC_DIR)/host.o $(HOST_SRC)
	g++ -g $(EXEC_DIR)/*.o -lxrt_coreutil -std=c++17 -L${XILINX_XRT}/lib -o ./$(EXEC_DIR)/host_ps_on_x86
else
host: guard-CXX guard-SDKTARGETSYSROOT 
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) -o $(EXEC_DIR)/host.o $(HOST_SRC)
	$(CXX) $(EXEC_DIR)/*.o $(GCC_LIB) -std=c++17 -o $(EXEC_DIR)/${EXECUTABLE}
	@echo "COMPLETE: Host application created."
endif


##################################################################################################
# Create the XCLBIN package
ifeq ($(TARGET),sw_emu)
package: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS
	emconfigutil --platform $(BASE_PLATFORM) --nd 1 --od $(EXEC_DIR) ;\
	v++ -p -t ${TARGET} \
		--platform ${BASE_PLATFORM} \
		--package.out_dir $(EXEC_DIR)/$(PACKAGE_OUT) \
		--package.defer_aie_run \
		./$(EXEC_DIR)/$(PFM).xsa \
		-o $(EXEC_DIR)/${FINAL_XCLBIN} \
		--temp_dir $(BUILD_DIR_MAIN)/package_temp \
		./$(EXEC_DIR)/$(PFM).xsa ./$(EXEC_DIR)/$(GRAPH_O) 

	
	@echo "COMPLETE: sw_emu package created."
else
package: guard-PLATFORM_REPO_PATHS guard-IMAGE guard-ROOTFS
	v++ -p -t ${TARGET} \
		-f ${BASE_PLATFORM} \
		--package.rootfs=${ROOTFS} \
		--package.image_format=ext4 \
		--package.boot_mode=sd \
		--package.kernel_image=${IMAGE} \
		--package.out_dir $(EXEC_DIR) \
		--output $(EXEC_DIR)/$(FINAL_XCLBIN) \
		--temp_dir $(BUILD_DIR_MAIN)/package_temp \
		--package.sd_file $(EXEC_DIR)/host.exe $(EXEC_DIR)/$(PFM).xsa $(EXEC_DIR)/libadf.a
	@echo "COMPLETE: emulation package created."

endif
# 		--package.sd_file $(EXEC_DIR)/host.exe $(EXEC_DIR)/$(PFM).xsa $(EXEC_DIR)/libadf.a

###################################################################################################

######################################## Emulation/Simulation ##################################################
#AIE or X86 Simulation
aiesim: $(EXEC_DIR)/$(GRAPH_O)
     
ifeq ($(TARGET),sw_emu)
	$(X86SIM) --pkg-dir=./$(AIE_WORK_DIR) --output-dir=$(AIE_SIM_DIR) --input-dir=aie/$(AIE_SRC)/data
else
	$(AIESIM) --profile --dump-vcd=$(AIE_SIM_DIR)/trace --pkg-dir=./$(AIE_WORK_DIR) --output-dir $(AIE_SIM_DIR) --input-dir=$(AIE_SRC)/data
endif 

#Build the design and then run sw/hw emulation 
run: all run_emu

###########################################################################
run_emu: 
# If the target is for SW_EMU, launch the emulator
ifeq (${TARGET},sw_emu)
	cd ./$(EXEC_DIR)
	export XCL_EMULATION_MODE=$(TARGET) 
	$(SW_EMU_CMD)
else
# If the target is for HW_EMU, launch the emulator
ifeq (${TARGET},hw_emu)
	cd ./$(EXEC_DIR)
	$(HW_EMU_CMD)
else
	@echo "Hardware build, no emulation executed."
endif
endif

###########################################################################

clean:
	rm -rf _x v++* $(EXEC_DIR)/$(KERNEL_XO) $(EXEC_DIR)/$(GRAPH_O) *.o *.compile_summary* *.xpe xnwOut *.xclbin* *.log *.xsa Work *.db *.csv *$(EXEC_DIR)/$(PFM)* *.jou .Xil
	rm -rf sw/*.log sw/*.xclbin sw/cfg/ sw/launch_hw_emu.sh sw/qemu_dts_files sw/emu_qemu_scripts sw/*.exe sw/_x/ sw/*summary sw/*.o sw/*.elf sw/*.xpe sw/xnwOut sw/Work sw/*.csv sw/*.db sw/*.bin sw/*.BIN sw/*.bif sw/launch_hw_emulator.sh sw/*.txt sw/emulation sw/.Xil ./x86simulator_output
	rm -rf sw/sd_card sw/sd_card.img sw/*.o ./*.exe sw/qeumu* x86simulator_output/ aiesimulator_output/ s2mm/ mm2s/ hls/


# Sample compilation commands with required flags
# make -f Makefile_VEK280 AIE_SRC=aie_maxeva PL_SRC=pl_maxeva CONFIG=conn_maxeva.cfg HOST_LOC=host TARGET=sw_emu all -nk &> compile.log

# sw_emu ai enigne option file 
# export X86SIM_OPTIONSPATH ./build/aie_maxeva_pl_maxeva_host_maxeva_sw_emu/Work_AIE_aie_maxeva_sw_emu/options/x86sim.options
# make -f Makefile_VEK280 aiesim AIE_SRC=./aie_bf16_bf16_64x96x64_api8x8x4/ TARGET=hw BUFF_OPT=8 
# make -f Makefile_VEK280 aiesim AIE_SRC=./aie_bf16_bf16_64x96x64_api8x8x4/ TARGET=sw_emu BUFF_OPT=8 